/* Generated by AN DISI Unibo */ 
package it.unibo.parkservicestatusguiactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkservicestatusguiactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "receive"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("receive") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("outdoorAlarm(N)"), Term.createTerm("outdoorAlarm(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI -> OUTDOOR alarm!")
						}
						if( checkMsgContent( Term.createTerm("outdoorAlarmRevoked(N)"), Term.createTerm("outdoorAlarmRevoked(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI -> OUTDOOR alarm REVOKED!")
						}
						if( checkMsgContent( Term.createTerm("temperatureAlarm(N)"), Term.createTerm("temperatureAlarm(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI -> Temperature alarm!")
								forward("fanStart", "fanStart(0)" ,"fanactor" ) 
						}
						if( checkMsgContent( Term.createTerm("temperatureAlarmRevoked(N)"), Term.createTerm("temperatureAlarmRevoked(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI -> Temperature alarm REVOKED!")
								forward("fanStop", "fanStop(0)" ,"fanactor" ) 
						}
					}
					 transition(edgeName="t12",targetState="receive",cond=whenEvent("outdoorAlarm"))
					transition(edgeName="t13",targetState="receive",cond=whenEvent("outdoorAlarmRevoked"))
					transition(edgeName="t14",targetState="receive",cond=whenEvent("temperatureAlarm"))
					transition(edgeName="t15",targetState="receive",cond=whenEvent("temperatureAlarmRevoked"))
				}	 
			}
		}
}
