/* Generated by AN DISI Unibo */ 
package it.unibo.parkservicestatusguiactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkservicestatusguiactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "receive"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var auto = false  
		return { //this:ActionBasciFsm
				state("receive") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("temperature(VALUE)"), Term.createTerm("temperature(VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI feedback -> The temperature is ${payloadArg(0)}")
						}
						if( checkMsgContent( Term.createTerm("slot(STATUS)"), Term.createTerm("slot(STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI feedback -> The slot is ${payloadArg(0)}")
						}
						if( checkMsgContent( Term.createTerm("outdoorAlarm(N)"), Term.createTerm("outdoorAlarm(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI feedback -> OUTDOOR alarm!")
						}
						if( checkMsgContent( Term.createTerm("outdoorAlarmRevoked(N)"), Term.createTerm("outdoorAlarmRevoked(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI feedback -> OUTDOOR alarm REVOKED!")
						}
						if( checkMsgContent( Term.createTerm("temperatureAlarm(N)"), Term.createTerm("temperatureAlarm(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI feedback -> Temperature alarm!")
								if(  auto  
								 ){forward("fanStart", "fanStart(0)" ,"fanactor" ) 
								}
						}
						if( checkMsgContent( Term.createTerm("temperatureAlarmRevoked(N)"), Term.createTerm("temperatureAlarmRevoked(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI feedback -> Temperature alarm REVOKED!")
								if(  auto  
								 ){forward("fanStop", "fanStop(0)" ,"fanactor" ) 
								}
						}
					}
					 transition(edgeName="t25",targetState="receive",cond=whenEvent("temperature"))
					transition(edgeName="t26",targetState="receive",cond=whenDispatch("slot"))
					transition(edgeName="t27",targetState="fanControl",cond=whenDispatch("fanStart"))
					transition(edgeName="t28",targetState="fanControl",cond=whenDispatch("fanStop"))
					transition(edgeName="t29",targetState="receive",cond=whenEvent("outdoorAlarm"))
					transition(edgeName="t30",targetState="receive",cond=whenEvent("outdoorAlarmRevoked"))
					transition(edgeName="t31",targetState="receive",cond=whenEvent("temperatureAlarm"))
					transition(edgeName="t32",targetState="receive",cond=whenEvent("temperatureAlarmRevoked"))
					transition(edgeName="t33",targetState="setAuto",cond=whenDispatch("fanAuto"))
				}	 
				state("fanControl") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("fanStart(N)"), Term.createTerm("fanStart(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI feedback -> redirecting fanStart(0)")
								forward("fanStart", "fanStart(0)" ,"fanactor" ) 
						}
						if( checkMsgContent( Term.createTerm("fanStop(N)"), Term.createTerm("fanStop(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Manager's GUI feedback -> redirecting fanStop(0)")
								forward("fanStop", "fanStop(0)" ,"fanactor" ) 
						}
					}
					 transition( edgeName="goto",targetState="receive", cond=doswitch() )
				}	 
				state("setAuto") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("fanAuto(STATUS)"), Term.createTerm("fanAuto(STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												if (payloadArg(0) == "AUTO") auto = true
												else if (payloadArg(0) == "MANUAL") auto = false
						}
					}
					 transition( edgeName="goto",targetState="receive", cond=doswitch() )
				}	 
			}
		}
}
