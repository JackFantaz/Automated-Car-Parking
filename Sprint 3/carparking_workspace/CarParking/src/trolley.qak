/*
 *    Automated Car-Parking
 *    EXECUTABLE MODEL AS A RESULT OF SPRINT 3
 *    by Giacomo Fantazzini and Claudia Badalamenti
 *
 * */

System carparking

Dispatch goto : goto(PLACE)
Dispatch movementDone : movementDone(N)
Dispatch notice : notice(NOTICE)
Dispatch slotnum : slotnum(SLOTNUM)
Dispatch tokenid : tokenid(TOKENID)
Dispatch cmd : cmd(MOVE)
Dispatch slot : slot(STATUS)

Dispatch enterRequest : enterRequest(N)
Dispatch carEnter : carEnter(N)
Dispatch exitRequest : exitRequest(TOKENID)

Dispatch fanStart : fanStart(N)
Dispatch fanStop : fanStop(N)
Dispatch fanAuto : fanAuto(STATUS)

Event indoorCleared : indoorCleared(N)
Event indoorOccupied : indoorOccupied(N)
Event outdoorCleared : outdoorCleared(N)
Event outdoorOccupied : outdoorOccupied(N)
Event temperature : temperature(VALUE)
Event outdoorAlarm : outdoorAlarm(N)
Event outdoorAlarmRevoked : outdoorAlarmRevoked(N)
Event temperatureAlarm : temperatureAlarm(N)
Event temperatureAlarmRevoked : temperatureAlarmRevoked(N)

Request step : step(TIME)
Reply stepdone : stepdone(V)

Request indoorStatus : indoorStatus(N)
Reply indoorStatus : indoorStatus(STATUS)

Request outdoorStatus : outdoorStatus(N)
Reply outdoorStatus : outdoorStatus(STATUS)

Request lastEvent : lastEvent(N)
Reply indoorCleared : indoorCleared(N)
Reply indoorOccupied : indoorOccupied(N)
Reply outdoorCleared : outdoorCleared(N)
Reply outdoorOccupied : outdoorOccupied(N)
Reply temperature : temperature(VALUE)

Context ctxcarparking ip[host="localhost" port=60000]
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]

ExternalQActor basicrobot context ctxbasicrobot

QActor parkmanagerserviceactor context ctxcarparking {

	[#
		var Slotnum = 1
		var Tokenid = "1"
	#]

	State setup initial {
		forward parkservicestatusguiactor -m slot : slot(vacant)
		updateResource [# "slot(vacant)" #]
	} Goto moveToHome

	State moveToHome {
		forward trolleyactor -m goto : goto(home)
	} Transition t
		whenMsg enterRequest -> acceptIN
		whenMsg exitRequest -> acceptOUT

	State acceptIN {
		request sensorsbrokeractor -m indoorStatus : indoorStatus(0)
	} Transition t whenReply indoorStatus -> do_acceptIn
		State do_acceptIn {
			onMsg(indoorStatus : indoorStatus(STATUS)) {
				if [# payloadArg(0) == "occupied" #] { forward parkserviceguiactor -m notice : notice(indoorArea(occupied)) }
			}
		} Goto informIN if [# payloadArg(0) == "free" #] else moveToHome

	State informIN {
		forward parkserviceguiactor -m slotnum : slotnum($Slotnum)
	} Goto do_informIN if [# Slotnum > 0 #] else moveToHome
		State do_informIN { } Transition t whenMsg carEnter -> moveToIn
	// Goto moveToIn if [# Slotnum > 0 #] else moveToHome
	// Transition t whenMsg carEnter and [# Slotnum > 0 #] -> moveToIn else Goto moveToHome

	State moveToIn {
		// forward parkserviceguiactor -m notice : notice(carEnter(received))
		forward trolleyactor -m goto : goto(indoor)
	} Transition t whenMsg movementDone -> receipt

	State receipt {
		forward parkserviceguiactor -m tokenid : tokenid($Tokenid)
	} Goto moveToSlotIn

	State moveToSlotIn {
		[# Slotnum = 0 #]
		forward parkservicestatusguiactor -m slot : slot(full)
		updateResource [# "slot(full)" #]
		forward trolleyactor -m goto : goto(parking)
	} Transition t whenMsg movementDone -> moveToHome

	State acceptOUT {
		onMsg (exitRequest : exitRequest(TOKENID)) { [# Tokenid = payloadArg(0) #] }
		if [# Slotnum == 0 #] { request sensorsbrokeractor -m outdoorStatus : outdoorStatus(0) }
		else { forward parkserviceguiactor -m notice : notice(tokenid(invalid)) }
	} Goto do_acceptOUT if [# Slotnum == 0 #] else moveToHome
		State do_acceptOUT { } Transition t whenReply outdoorStatus -> redo_acceptOUT
		State redo_acceptOUT {
			onMsg(outdoorStatus : outdoorStatus(STATUS)) {
				if [# payloadArg(0) == "free" #] { forward parkserviceguiactor -m notice : notice(exitRequest(received)) }
				else { forward parkserviceguiactor -m notice : notice(outdoorArea(occupied)) }
			}
		} Goto findSlot if [# payloadArg(0) == "free" #] else moveToHome

	State findSlot {
		[# Slotnum = 1 #]
		forward parkservicestatusguiactor -m slot : slot(vacant)
		updateResource [# "slot(vacant)" #]
		// forward parkserviceguiactor -m notice : notice(carslotnum($Slotnum))
	} Goto moveToSlotOut

	State moveToSlotOut {
		forward trolleyactor -m goto : goto(parking)
	} Transition t whenMsg movementDone -> moveToOut

	State moveToOut {
		forward trolleyactor -m goto : goto(outdoor)
	} Transition t whenMsg movementDone -> moveToHome

}

QActor trolleyactor context ctxcarparking {

	[#
		var home = arrayOf("-", "-", "-")
		var parking = arrayOf("-", "-", "-")
		var indoor = arrayOf("-", "-", "-")
		var outdoor = arrayOf("-", "-", "-")
		var goingHome = false
	#]

	State setup initial {
		solve( consult("locationsKb.pl") )
		solve( home(X, Y, D) )
		[# home = arrayOf(getCurSol("X").toString(), getCurSol("Y").toString(), getCurSol("D").toString().toUpperCase()) #]
		solve( parking(X, Y, D) )
		[# parking = arrayOf(getCurSol("X").toString(), getCurSol("Y").toString(), getCurSol("D").toString().toUpperCase()) #]
		solve( indoor(X, Y, D) )
		[# indoor = arrayOf(getCurSol("X").toString(), getCurSol("Y").toString(), getCurSol("D").toString().toUpperCase()) #]
		solve( outdoor(X, Y, D) )
		[# outdoor = arrayOf(getCurSol("X").toString(), getCurSol("Y").toString(), getCurSol("D").toString().toUpperCase()) #]
	} Transition t whenMsg goto -> idle

	State idle {
		onMsg (goto : goto(home)) {
			run carparking.directionalPlanner.planFor(home)
			[# goingHome = true #]
		}
		onMsg (goto : goto(parking)) {
			run carparking.directionalPlanner.planFor(parking)
			[# goingHome = false #]
		}
		onMsg (goto : goto(outdoor)) {
			run carparking.directionalPlanner.planFor(outdoor)
			[# goingHome = false #]
		}
		onMsg (goto : goto(indoor)) {
			run carparking.directionalPlanner.planFor(indoor)
			[# goingHome = false #]
		}
	} Goto working

	State working {
		[# val move = carparking.directionalPlanner.getNextPlannedMove() #]
		if [# move.isNotEmpty() #] {
			if [# move == "w" #] { request basicrobot -m step : step(340) }
			if [# move == "l" #] { forward basicrobot -m cmd : cmd(l) }
			if [# move == "r" #] { forward basicrobot -m cmd : cmd(r) }
			run carparking.directionalPlanner.updateMap(move)
		} else {
			delay 1000
			if [# !goingHome #] {
				forward parkmanagerserviceactor -m movementDone : movementDone(0)
			}
		}
	} Transition t
		whenTime 450 -> working
		whenReply stepdone -> working
		whenMsg goto -> idle

}

QActor sensorsbrokeractor context ctxcarparking {

	[#
		var Indoor = ""
		var Outdoor = ""
	#]

	State waiting initial {
		onMsg (indoorStatus : indoorStatus(N)) {
			println("Broker feedback -> Replying with indoorStatus($Indoor)")
			replyTo indoorStatus with indoorStatus : indoorStatus($Indoor)
		}
		onMsg (outdoorStatus : outdoorStatus(N)) {
			println("Broker feedback -> Replying with outdoorStatus($Outdoor)")
			replyTo outdoorStatus with outdoorStatus : outdoorStatus($Outdoor)
		}
	} Transition t
		whenEvent indoorOccupied -> register
		whenEvent outdoorOccupied -> register
		whenEvent indoorCleared-> register
		whenEvent outdoorCleared -> register
		whenRequest indoorStatus -> waiting
		whenRequest outdoorStatus -> waiting

	State register {
		onMsg (indoorOccupied : indoorOccupied(N)) { [# Indoor = "occupied" #] }
		onMsg (outdoorOccupied : outdoorOccupied(N)) { [# Outdoor = "occupied" #] }
		onMsg (indoorCleared : indoorCleared(N)) { [# Indoor = "free" #] }
		onMsg (outdoorCleared : outdoorCleared(N)) { [# Outdoor = "free" #] }
	} Goto waiting

}

QActor parkserviceguiactor context ctxcarparking {

	State setup initial {
		forward parkserviceguiactor -m notice : notice(system(started))
	} Goto receive

	State receive {
		onMsg (slotnum : slotnum(SLOTNUM)) {
			println("Client's GUI feedback -> The SLOTNUM is ${payloadArg(0)}")
			updateResource [# "${currentMsg.msgContent()}" #]
		}
		onMsg (tokenid : tokenid(TOKENID)) {
			println("Client's GUI feedback -> The TOKENID is ${payloadArg(0)}")
			updateResource [# "${currentMsg.msgContent()}" #]
		}
		onMsg (notice : notice(MESSAGE)) {
			println("Client's GUI feedback -> Notice received: ${payloadArg(0)}")
			updateResource [# "${currentMsg.msgContent()}" #]
		}
	} Transition t
		whenMsg slotnum -> receive
		whenMsg tokenid -> receive
		whenMsg notice -> receive
		whenMsg enterRequest -> businessLogicControl
		whenMsg carEnter -> businessLogicControl
		whenMsg exitRequest -> businessLogicControl

	State businessLogicControl {
		onMsg (enterRequest : enterRequest(0)) {
			println("Client's GUI feedback -> redirecting enterRequest(0)")
			forward parkmanagerserviceactor -m enterRequest : enterRequest(0)
		}
		onMsg (carEnter : carEnter(0)) {
			println("Client's GUI feedback -> redirecting carEnter(0)")
			forward parkmanagerserviceactor -m carEnter : carEnter(0)
		}
		onMsg (exitRequest : exitRequest(TOKENID)) {
			[# var Temp = payloadArg(0) #]
			println("Client's GUI feedback -> redirecting exitRequest($Temp)")
			forward parkmanagerserviceactor -m exitRequest : exitRequest($Temp)
		}
	} Goto receive

}

QActor parkservicestatusguiactor context ctxcarparking {

	[# var auto = false #]

	State receive initial {
		onMsg (temperature : temperature(VALUE)) {
			println("Manager's GUI feedback -> The temperature is ${payloadArg(0)}")
		}
		onMsg (slot : slot(STATUS)) {
			println("Manager's GUI feedback -> The slot is ${payloadArg(0)}")
		}
		onMsg (outdoorAlarm : outdoorAlarm(N)) {
			println("Manager's GUI feedback -> OUTDOOR alarm!")
		}
		onMsg (outdoorAlarmRevoked : outdoorAlarmRevoked(N)) {
			println("Manager's GUI feedback -> OUTDOOR alarm REVOKED!")
		}
		onMsg (temperatureAlarm : temperatureAlarm(N)) {
			println("Manager's GUI feedback -> Temperature alarm!")
			if [# auto #] { forward fanactor -m fanStart : fanStart(0) }
		}
		onMsg (temperatureAlarmRevoked : temperatureAlarmRevoked(N)) {
			println("Manager's GUI feedback -> Temperature alarm REVOKED!")
			if [# auto #] { forward fanactor -m fanStop : fanStop(0) }
		}
	} Transition t
		whenEvent temperature -> receive
		whenMsg slot -> receive
		whenMsg fanStart -> fanControl
		whenMsg fanStop -> fanControl
		whenEvent outdoorAlarm -> receive
		whenEvent outdoorAlarmRevoked -> receive
		whenEvent temperatureAlarm -> receive
		whenEvent temperatureAlarmRevoked -> receive
		whenMsg fanAuto -> setAuto

	State fanControl {
		onMsg (fanStart : fanStart(0)) {
			println("Manager's GUI feedback -> redirecting fanStart(0)")
			forward fanactor -m fanStart : fanStart(0)
		}
		onMsg (fanStop : fanStop(0)) {
			println("Manager's GUI feedback -> redirecting fanStop(0)")
			forward fanactor -m fanStop : fanStop(0)
		}
	} Goto receive

	State setAuto {
		onMsg(fanAuto : fanAuto(STATUS)) {
			[#
				if (payloadArg(0) == "AUTO") auto = true
				else if (payloadArg(0) == "MANUAL") auto = false
			#]

		}
	} Goto receive

}

QActor weightactor context ctxcarparking {

	[#
		val mock = carparking.presence.PresenceWeight(carparking.presence.MockWeightSensor())
		var previous = false
		var present = false
	#]

	State setup initial {
		emit indoorCleared : indoorCleared(0)
	} Goto polling

	State polling {
		[# present = mock.isPresent() #]
		if [# present && previous!=present #] {
			emit indoorOccupied : indoorOccupied(0)
			updateResource [# "indoorOccupied(0)" #]
		}
		if [# !present && previous!=present #] {
			emit indoorCleared : indoorCleared(0)
			updateResource [# "indoorCleared(0)" #]
		}
		[# previous = present #]
	} Transition t
		whenTime 500 -> polling
		whenRequest lastEvent -> response

	State response {
		if [# present #] { replyTo lastEvent with indoorOccupied : indoorOccupied(0) }
		else { replyTo lastEvent with indoorCleared : indoorCleared(0) }
	} Goto polling

}

QActor sonaractor context ctxcarparking {

	[#
		val mock = carparking.presence.PresenceSonar(carparking.presence.MockSonar())
		var previous = false
		var present = false
	#]

	State setup initial {
		emit outdoorCleared : outdoorCleared(0)
	} Goto polling

	State polling {
		[# present = mock.isPresent() #]
		if [# present && previous!=present #] {
			emit outdoorOccupied : outdoorOccupied(0)
			updateResource [# "outdoorOccupied(0)" #]
		}
		if [# !present && previous!=present #] {
			emit outdoorCleared : outdoorCleared(0)
			updateResource [# "outdoorCleared(0)" #]
		}
		[# previous = present #]
	} Transition t
		whenTime 500 -> polling
		whenRequest lastEvent -> response

	State response {
		if [# present #] { replyTo lastEvent with outdoorOccupied : outdoorOccupied(0) }
		else { replyTo lastEvent with outdoorCleared : outdoorCleared(0) }
	} Goto polling

}

QActor thermometeractor context ctxcarparking {

	[#
		val Mock = carparking.temperature.MockThermometer()
		var Previous = Mock.getTemperature()
		var Temperature = Mock.getTemperature()
	#]

	State setup initial {
		emit temperature : temperature($Temperature)
		updateResource [# "temperature($Temperature)" #]
	} Goto polling

	State polling {
		[# Temperature = Mock.getTemperature() #]
		if [# Temperature != Previous #] {
			emit temperature : temperature($Temperature)
			updateResource [# "temperature($Temperature)" #]
		}
		[# Previous = Temperature #]
	} Transition t
		whenTime 500 -> polling
		whenRequest lastEvent -> response

	State response {
		replyTo lastEvent with temperature : temperature($Temperature)
	} Goto polling

}

QActor fanactor context ctxcarparking {

	[# val mock = carparking.temperature.MockFan() #]

	State stop initial {
		run mock.turnOff()
		updateResource [# "fanStop(0)" #]
	} Transition t
		whenMsg fanStart -> start
		whenMsg fanStop -> stop

	State start {
		run mock.turnOn()
		updateResource [# "fanStart(0)" #]
	} Transition t
		whenMsg fanStart -> start
		whenMsg fanStop -> stop

}

QActor outdoorsentinelactor context ctxcarparking {

	State watching initial { }
	Transition t whenEvent outdoorOccupied -> timer

	State timer { }
	Transition t
		whenTime 5000 -> alarm // DTFREE
		whenEvent outdoorCleared -> watching

	State alarm {
		emit outdoorAlarm : outdoorAlarm(0)
		updateResource [# "outdoorAlarm(0)" #]
	} Transition t whenEvent outdoorCleared -> revoke

	State revoke {
		emit outdoorAlarmRevoked : outdoorAlarmRevoked(0)
		updateResource [# "outdoorAlarmRevoked(0)" #]
	} Goto watching

}

QActor temperaturesentinelactor context ctxcarparking {
	[#
		val tmax = 35.0
		var alarmed = false
	#]
	State watching initial {
		onMsg (temperature : temperature(VALUE)) {
			if [# payloadArg(0).toFloat() > tmax && !alarmed #] {
				emit temperatureAlarm : temperatureAlarm(0)
				updateResource [# "temperatureAlarm(0)" #]
				[# alarmed = true #]
			}
			if [# payloadArg(0).toFloat() <= tmax && alarmed #] {
				emit temperatureAlarmRevoked : temperatureAlarmRevoked(0)
				updateResource [# "temperatureAlarmRevoked(0)" #]
				[# alarmed = false #]
			}
		}
	} Transition t whenEvent temperature -> watching
}
