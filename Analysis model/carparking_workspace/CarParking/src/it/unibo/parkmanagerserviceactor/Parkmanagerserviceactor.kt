/* Generated by AN DISI Unibo */ 
package it.unibo.parkmanagerserviceactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkmanagerserviceactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "moveToHome_enter"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var slotnum = 1  
		return { //this:ActionBasciFsm
				state("moveToHome_enter") { //this:State
					action { //it:State
						delay(1000) 
						forward("goto", "goto(home)" ,"trolleyactor" ) 
					}
					 transition(edgeName="t0",targetState="acceptIN",cond=whenEvent("indoorOccupied"))
				}	 
				state("moveToHome_exit") { //this:State
					action { //it:State
						delay(1000) 
						forward("goto", "goto(home)" ,"trolleyactor" ) 
						stateTimer = TimerActor("timer_moveToHome_exit", 
							scope, context!!, "local_tout_parkmanagerserviceactor_moveToHome_exit", 5000.toLong() )
					}
					 transition(edgeName="t1",targetState="acceptOUT",cond=whenTimeout("local_tout_parkmanagerserviceactor_moveToHome_exit"))   
				}	 
				state("acceptIN") { //this:State
					action { //it:State
						forward("notice", "notice(enter_request_accepted)" ,"parkserviceguiactor" ) 
					}
					 transition( edgeName="goto",targetState="informIN", cond=doswitch() )
				}	 
				state("informIN") { //this:State
					action { //it:State
						if(  slotnum > 0  
						 ){forward("slotnum", "slotnum(1)" ,"parkserviceguiactor" ) 
						}
					}
					 transition( edgeName="goto",targetState="moveToIn", cond=doswitchGuarded({ slotnum > 0  
					}) )
					transition( edgeName="goto",targetState="moveToHome_enter", cond=doswitchGuarded({! ( slotnum > 0  
					) }) )
				}	 
				state("moveToIn") { //this:State
					action { //it:State
						forward("goto", "goto(indoor)" ,"trolleyactor" ) 
					}
					 transition(edgeName="t2",targetState="receipt",cond=whenDispatch("movementDone"))
				}	 
				state("receipt") { //this:State
					action { //it:State
						delay(1000) 
						forward("tokenid", "tokenid(1)" ,"parkserviceguiactor" ) 
					}
					 transition( edgeName="goto",targetState="moveToSlotIn", cond=doswitch() )
				}	 
				state("moveToSlotIn") { //this:State
					action { //it:State
						forward("goto", "goto(parking)" ,"trolleyactor" ) 
					}
					 transition(edgeName="t3",targetState="moveToHome_exit",cond=whenDispatch("movementDone"))
				}	 
				state("acceptOUT") { //this:State
					action { //it:State
						forward("notice", "notice(exit_request_accepted)" ,"parkserviceguiactor" ) 
					}
					 transition( edgeName="goto",targetState="findSlot", cond=doswitch() )
				}	 
				state("findSlot") { //this:State
					action { //it:State
						forward("notice", "notice(carslotnum_1)" ,"parkserviceguiactor" ) 
					}
					 transition( edgeName="goto",targetState="moveToSlotOut", cond=doswitch() )
				}	 
				state("moveToSlotOut") { //this:State
					action { //it:State
						forward("goto", "goto(parking)" ,"trolleyactor" ) 
					}
					 transition(edgeName="t4",targetState="moveToOut",cond=whenDispatch("movementDone"))
				}	 
				state("moveToOut") { //this:State
					action { //it:State
						delay(1000) 
						forward("goto", "goto(outdoor)" ,"trolleyactor" ) 
					}
					 transition(edgeName="t5",targetState="moveToHome_enter",cond=whenDispatch("movementDone"))
				}	 
			}
		}
}
