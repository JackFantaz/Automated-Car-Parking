/* Generated by AN DISI Unibo */ 
package it.unibo.sonaractor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonaractor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "setup"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val mock = carparking.presence.PresenceSonar(carparking.presence.MockSonar())
				//val mock = carparking.presence.PresenceSonar(carparking.presence.SonarDriver(), 25)
				var previous = false
				var present = false
		return { //this:ActionBasciFsm
				state("setup") { //this:State
					action { //it:State
						emit("outdoorCleared", "outdoorCleared(0)" ) 
					}
					 transition( edgeName="goto",targetState="polling", cond=doswitch() )
				}	 
				state("polling") { //this:State
					action { //it:State
						 present = mock.isPresent()  
						if(  present && previous!=present  
						 ){emit("outdoorOccupied", "outdoorOccupied(0)" ) 
						updateResourceRep( "outdoorOccupied(0)"  
						)
						}
						if(  !present && previous!=present  
						 ){emit("outdoorCleared", "outdoorCleared(0)" ) 
						updateResourceRep( "outdoorCleared(0)"  
						)
						}
						 previous = present  
						stateTimer = TimerActor("timer_polling", 
							scope, context!!, "local_tout_sonaractor_polling", 500.toLong() )
					}
					 transition(edgeName="t0",targetState="polling",cond=whenTimeout("local_tout_sonaractor_polling"))   
					transition(edgeName="t1",targetState="response",cond=whenRequest("lastEvent"))
				}	 
				state("response") { //this:State
					action { //it:State
						if(  present  
						 ){answer("lastEvent", "outdoorOccupied", "outdoorOccupied(0)"   )  
						}
						else
						 {answer("lastEvent", "outdoorCleared", "outdoorCleared(0)"   )  
						 }
					}
					 transition( edgeName="goto",targetState="polling", cond=doswitch() )
				}	 
			}
		}
}
