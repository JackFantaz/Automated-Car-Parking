/* Generated by AN DISI Unibo */ 
package it.unibo.sensorsbrokeractor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sensorsbrokeractor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "waiting"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Indoor = ""
				var Outdoor = ""
		return { //this:ActionBasciFsm
				state("waiting") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("indoorStatus(N)"), Term.createTerm("indoorStatus(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("indoorStatus", "indoorStatus", "indoorStatus($Indoor)"   )  
						}
						if( checkMsgContent( Term.createTerm("outdoorStatus(N)"), Term.createTerm("outdoorStatus(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("outdoorStatus", "outdoorStatus", "outdoorStatus($Outdoor)"   )  
						}
					}
					 transition(edgeName="t17",targetState="register",cond=whenEvent("indoorOccupied"))
					transition(edgeName="t18",targetState="register",cond=whenEvent("outdoorOccupied"))
					transition(edgeName="t19",targetState="register",cond=whenEvent("indoorCleared"))
					transition(edgeName="t20",targetState="register",cond=whenEvent("outdoorCleared"))
					transition(edgeName="t21",targetState="waiting",cond=whenRequest("indoorStatus"))
					transition(edgeName="t22",targetState="waiting",cond=whenRequest("outdoorStatus"))
				}	 
				state("register") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("indoorOccupied(N)"), Term.createTerm("indoorOccupied(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Indoor = "occupied"  
						}
						if( checkMsgContent( Term.createTerm("outdoorOccupied(N)"), Term.createTerm("outdoorOccupied(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Outdoor = "occupied"  
						}
						if( checkMsgContent( Term.createTerm("indoorCleared(N)"), Term.createTerm("indoorCleared(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Indoor = "free"  
						}
						if( checkMsgContent( Term.createTerm("outdoorCleared(N)"), Term.createTerm("outdoorCleared(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Outdoor = "free"  
						}
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
