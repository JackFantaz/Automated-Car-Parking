/* Generated by AN DISI Unibo */ 
package it.unibo.temperaturesentinelactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Temperaturesentinelactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "watching"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val tmax = 35.0
				var alarmed = false
		return { //this:ActionBasciFsm
				state("watching") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("temperature(VALUE)"), Term.createTerm("temperature(VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(0).toFloat() > tmax && !alarmed  
								 ){emit("temperatureAlarm", "temperatureAlarm(0)" ) 
								updateResourceRep( "temperatureAlarm(0)"  
								)
								 alarmed = true  
								}
								if(  payloadArg(0).toFloat() <= tmax && alarmed  
								 ){emit("temperatureAlarmRevoked", "temperatureAlarmRevoked(0)" ) 
								updateResourceRep( "temperatureAlarmRevoked(0)"  
								)
								 alarmed = false  
								}
						}
					}
					 transition(edgeName="t54",targetState="watching",cond=whenEvent("temperature"))
				}	 
			}
		}
}
