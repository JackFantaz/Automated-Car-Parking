/* Generated by AN DISI Unibo */ 
package it.unibo.weightactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Weightactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "polling"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val mock = carparking.presence.PresenceWeight(carparking.presence.MockWeightSensor())
				var previous = mock.isPresent()
				var present = previous
		return { //this:ActionBasciFsm
				state("polling") { //this:State
					action { //it:State
						 present = mock.isPresent()  
						if(  present && previous!=present  
						 ){emit("indoorOccupied", "indoorOccupied(0)" ) 
						}
						if(  !present && previous!=present  
						 ){emit("indoorCleared", "indoorCleared(0)" ) 
						}
						 previous = present  
						delay(500) 
					}
					 transition( edgeName="goto",targetState="polling", cond=doswitch() )
				}	 
			}
		}
}
