/* Generated by AN DISI Unibo */ 
package it.unibo.testactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Testactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "testing"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var fanStatus = false  
		return { //this:ActionBasciFsm
				state("testing") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						stateTimer = TimerActor("timer_testing", 
							scope, context!!, "local_tout_testactor_testing", 3000.toLong() )
					}
					 transition(edgeName="t16",targetState="toggle",cond=whenTimeout("local_tout_testactor_testing"))   
					transition(edgeName="t17",targetState="testing",cond=whenEvent("indoorOccupied"))
					transition(edgeName="t18",targetState="testing",cond=whenEvent("indoorCleared"))
					transition(edgeName="t19",targetState="testing",cond=whenEvent("outdoorOccupied"))
					transition(edgeName="t20",targetState="testing",cond=whenEvent("outdoorCleared"))
					transition(edgeName="t21",targetState="testing",cond=whenEvent("temperature"))
				}	 
				state("toggle") { //this:State
					action { //it:State
						if(  !fanStatus  
						 ){forward("fanStart", "fanStart(0)" ,"fanactor" ) 
						}
						else
						 {forward("fanStop", "fanStop(0)" ,"fanactor" ) 
						 }
						 fanStatus = !fanStatus  
					}
					 transition( edgeName="goto",targetState="testing", cond=doswitch() )
				}	 
			}
		}
}
